import subprocess
import time
import sys
from datetime import datetime
import statistics

# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ---
# –°–ø–∏—Å–æ–∫ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö —Ü–µ–ª–µ–π —Å –∏–∑–≤–µ—Å—Ç–Ω—ã–º–∏ –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–º–∏ –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–º–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
# –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –Ω–∞–¥–µ–∂–Ω—ã–µ –ø—É–±–ª–∏—á–Ω—ã–µ DNS-—Å–µ—Ä–≤–µ—Ä—ã –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —à–∏—Ä–æ–∫–æ–≥–æ –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ –æ—Ö–≤–∞—Ç–∞ (–≤–µ—Å—å –º–∏—Ä).
TARGETS = {
    # –°–µ–≤–µ—Ä–Ω–∞—è –ê–º–µ—Ä–∏–∫–∞
    "Google_US_E": {"ip": "8.8.8.8", "location": "–í–∏—Ä–¥–∂–∏–Ω–∏—è/–ö–∞–ª–∏—Ñ–æ—Ä–Ω–∏—è, –°–®–ê (–°–µ–≤–µ—Ä–Ω–∞—è –ê–º–µ—Ä–∏–∫–∞)"},
    "OpenDNS_US_W": {"ip": "208.67.222.222", "location": "–°–∞–Ω-–§—Ä–∞–Ω—Ü–∏—Å–∫–æ, –°–®–ê (–ó–∞–ø–∞–¥)"},
    
    # –Æ–∂–Ω–∞—è –ê–º–µ—Ä–∏–∫–∞
    "Google_BR": {"ip": "8.8.4.4", "location": "–°–∞–Ω-–ü–∞—É–ª—É, –ë—Ä–∞–∑–∏–ª–∏—è (–Æ–∂–Ω–∞—è –ê–º–µ—Ä–∏–∫–∞)"},
    
    # –ï–≤—Ä–æ–ø–∞
    "Cloudflare_EU": {"ip": "1.1.1.1", "location": "–§—Ä–∞–Ω–∫—Ñ—É—Ä—Ç/–õ–æ–Ω–¥–æ–Ω, –ì–µ—Ä–º–∞–Ω–∏—è/–í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è (–ï–≤—Ä–æ–ø–∞)"},
    "Quad9_EU": {"ip": "9.9.9.9", "location": "–¶—é—Ä–∏—Ö/–ê–º—Å—Ç–µ—Ä–¥–∞–º (–ï–≤—Ä–æ–ø–∞)"},
    "Yandex_RU": {"ip": "77.88.8.8", "location": "–ú–æ—Å–∫–≤–∞, –†–æ—Å—Å–∏—è (–ï–≤—Ä–∞–∑–∏—è)"},
    
    # –ê—Ñ—Ä–∏–∫–∞
    "OpenDNS_ZA": {"ip": "196.43.46.190", "location": "–ô–æ—Ö–∞–Ω–Ω–µ—Å–±—É—Ä–≥, –Æ–ê–† (–ê—Ñ—Ä–∏–∫–∞)"},
    
    # –ê–∑–∏—è (–í–æ—Å—Ç–æ–∫ –∏ –Æ–≥–æ-–í–æ—Å—Ç–æ–∫)
    "AliDNS_CN": {"ip": "223.5.5.5", "location": "–ü–µ–∫–∏–Ω/–®–∞–Ω—Ö–∞–π, –ö–∏—Ç–∞–π (–í–æ—Å—Ç–æ—á–Ω–∞—è –ê–∑–∏—è)"},
    "Hinet_TW": {"ip": "168.95.1.1", "location": "–¢–∞–π–±—ç–π, –¢–∞–π–≤–∞–Ω—å (–í–æ—Å—Ç–æ—á–Ω–∞—è –ê–∑–∏—è)"},
    
    # –û–∫–µ–∞–Ω–∏—è/–ê–≤—Å—Ç—Ä–∞–ª–∏—è
    "Cloudflare_AU": {"ip": "1.0.0.1", "location": "–°–∏–¥–Ω–µ–π, –ê–≤—Å—Ç—Ä–∞–ª–∏—è (–û–∫–µ–∞–Ω–∏—è)"},
}

# –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–∫–µ—Ç–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ –∫–∞–∂–¥—É—é —Ü–µ–ª—å
PING_COUNT = 3
# –¢–∞–π–º–∞—É—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –ø–∞–∫–µ—Ç–∞ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
PING_TIMEOUT_PER_PACKET = 2 
# –û–±—â–∏–π —Ç–∞–π–º–∞—É—Ç –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ, —á–µ–º PING_COUNT * PING_TIMEOUT_PER_PACKET)
COMMAND_TIMEOUT = (PING_COUNT * PING_TIMEOUT_PER_PACKET) + 5 

# --- –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ü–ò–ù–ì–ê –û–î–ù–û–ô –¶–ï–õ–ò ---
def ping_target(target_name, target_data):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç —Å–µ—Ä–∏—é –ø–∏–Ω–≥–æ–≤ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É."""
    ip = target_data['ip']
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏—é —Ç–∞–π–º–∞—É—Ç–∞ –Ω–∞ –ø–∞–∫–µ—Ç (-W 2) –¥–ª—è –±–æ–ª—å—à–µ–π –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ –∏ -c –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–∞–∫–µ—Ç–æ–≤
    PING_COMMAND = ['ping', '-c', str(PING_COUNT), '-W', str(PING_TIMEOUT_PER_PACKET), ip]
    
    latencies = []
    loss = 0
        
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—É ping. –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π —Ç–∞–π–º–∞—É—Ç –¥–ª—è –≤—Å–µ–π –∫–æ–º–∞–Ω–¥—ã.
        result = subprocess.run(
            PING_COMMAND, 
            capture_output=True, 
            text=True, 
            timeout=COMMAND_TIMEOUT
        )
        
        # –†–∞–∑–±–∏—Ä–∞–µ–º –≤—ã–≤–æ–¥ ping
        
        # 1. –ü–æ–∏—Å–∫ –ø–æ—Ç–µ—Ä—å
        loss_line = [line for line in result.stdout.split('\n') if 'transmitted' in line]
        if loss_line:
            # –ü—Ä–∏–º–µ—Ä: 3 packets transmitted, 2 received, 33% packet loss, time 2005ms
            parts = loss_line[0].split(', ')
            for part in parts:
                if 'loss' in part:
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –ø–æ—Ç–µ—Ä—å
                    loss_percent_str = part.split()[0].replace('%', '')
                    loss_percent = float(loss_percent_str)
                    received_count = PING_COUNT - int(PING_COUNT * loss_percent / 100)
                    loss = PING_COUNT - received_count
                    
        # 2. –ü–æ–∏—Å–∫ –≤—Ä–µ–º–µ–Ω–∏ (–ª–∞—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏)
        rtt_line = [line for line in result.stdout.split('\n') if 'min/avg/max' in line]
        if rtt_line:
            # –ü—Ä–∏–º–µ—Ä: rtt min/avg/max/mdev = 44.130/45.289/46.853/1.121 ms
            # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (avg)
            avg_latency = float(rtt_line[0].split('=')[1].split('/')[1])
            latencies.append(avg_latency)
            
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –∏–ª–∏ –≤—Å–µ –ø–∞–∫–µ—Ç—ã –ø–æ—Ç–µ—Ä—è–Ω—ã, 
        # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º "–ë–µ—Å–∫–æ–Ω–µ—á–Ω–æ—Å—Ç—å" –∏ –ø–æ–ª–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –ø–æ—Ç–µ—Ä—å.
        if not latencies or loss == PING_COUNT:
            return float('inf'), 100.0, PING_COUNT, loss

        return latencies[0], loss_percent, PING_COUNT, loss
        
    except subprocess.TimeoutExpired:
        # –û–±—â–∏–π —Ç–∞–π–º–∞—É—Ç –∫–æ–º–∞–Ω–¥—ã
        return float('inf'), 100.0, PING_COUNT, PING_COUNT
    except Exception as e:
        # –î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ö–æ—Å—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)
        # print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∏–Ω–≥–µ {target_name}: {e}", file=sys.stderr)
        return float('inf'), 100.0, PING_COUNT, PING_COUNT

# --- –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ê–ù–ê–õ–ò–ó–ê ---
def run_geo_analyzer():
    start_time = datetime.now()
    results = {}
    
    print("üåç –ó–∞–ø—É—Å–∫ –≥–µ–æ-–∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ PING...")
    print(f"   –ü—Ä–æ–≤–µ—Ä—è–µ–º {len(TARGETS)} –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö —Ü–µ–ª–µ–π. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è {PING_COUNT} –ø–∞–∫–µ—Ç–∞ –Ω–∞ –∫–∞–∂–¥—É—é —Ü–µ–ª—å.")
    print("=" * 80)
    
    # 1. –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–∏–Ω–≥–æ–≤
    for name, data in TARGETS.items():
        avg_latency, loss_percent, transmitted, lost = ping_target(name, data)
        
        results[name] = {
            'ip': data['ip'],
            'location': data['location'],
            'avg_latency': avg_latency,
            'loss_percent': loss_percent,
            'transmitted': transmitted,
            'lost': lost
        }
        
        status = "‚úÖ OK" if avg_latency != float('inf') else "‚ùå FAIL"
        latency_str = f"{avg_latency:.2f} –º—Å" if avg_latency != float('inf') else "TIMEOUT"
        
        print(f"[{status}] {name:15}: {latency_str:<12} | –ü–æ—Ç–µ—Ä–∏: {loss_percent:.1f}% ({lost}/{transmitted}) | –õ–æ–∫–∞—Ü–∏—è: {data['location']}")
        
    end_time = datetime.now()
    duration = (end_time - start_time).total_seconds()
    
    print("=" * 80)
    print(f"üïí –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {duration:.2f} —Å–µ–∫—É–Ω–¥.")
    
    # 2. –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –±–ª–∏–∂–∞–π—à–µ–π —Ç–æ—á–∫–∏
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, –∏—Å–∫–ª—é—á–∞—è —Ç–µ, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª–∏
    responded_targets = {k: v for k, v in results.items() if v['avg_latency'] != float('inf')}
    
    if not responded_targets:
        print("\n‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –ù–∏ –æ–¥–Ω–∞ –∏–∑ —Ü–µ–ª–µ–π –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª–∞ –Ω–∞ –ø–∏–Ω–≥. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ.")
        return

    # –ù–∞—Ö–æ–¥–∏–º —Ü–µ–ª—å —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—Ä–µ–¥–Ω–µ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
    closest_target_name = min(responded_targets, key=lambda k: responded_targets[k]['avg_latency'])
    closest_target = responded_targets[closest_target_name]
    
    # 3. –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏ –∑–∞–∫–ª—é—á–µ–Ω–∏—è
    print("\n================================================================================\n")
    print("‚≠ê –û–¶–ï–ù–ö–ê –ì–ï–û–ì–†–ê–§–ò–ß–ï–°–ö–û–ì–û –ú–ï–°–¢–û–ü–û–õ–û–ñ–ï–ù–ò–Ø –ü–û PING")
    print("=" * 80)
    
    print(f"–ù–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ —Å–µ—Ç–µ–≤–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏, —Å–∞–º–æ–π –ë–õ–ò–ó–ö–û–ô –∫ –í–∞–º —Ç–æ—á–∫–æ–π –æ–∫–∞–∑–∞–ª–∞—Å—å:")
    print(f"-> –¶–ï–õ–¨: {closest_target_name} ({TARGETS[closest_target_name]['ip']})")
    print(f"-> –õ–û–ö–ê–¶–ò–Ø: {closest_target['location']}")
    print(f"-> –°–†–ï–î–ù–ò–ô PING: {closest_target['avg_latency']:.2f} –º—Å")
    print(f"-> –ü–û–¢–ï–†–ò: {closest_target['loss_percent']:.1f}%")
    
    # –í—ã–≤–æ–¥ –∑–∞–∫–ª—é—á–µ–Ω–∏—è –æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏
    print("\n‚úÖ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:")
    if closest_target['avg_latency'] < 50 and closest_target['loss_percent'] < 5:
        conclusion = f"–í–∞—à–µ —Å–µ—Ç–µ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ, –≤–µ—Ä–æ—è—Ç–Ω–æ, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ç–æ–º –∂–µ —Ä–µ–≥–∏–æ–Ω–µ (–∏–ª–∏ –Ω–∞ —Ç–æ–º –∂–µ –∫–æ–Ω—Ç–∏–Ω–µ–Ω—Ç–µ), —á—Ç–æ –∏ {closest_target['location']}. –≠—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç—Å—è –æ—á–µ–Ω—å –Ω–∏–∑–∫–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π (RTT)."
    elif closest_target['avg_latency'] < 150 and closest_target['loss_percent'] < 10:
        conclusion = f"–í–∞—à–∞ –∑–∞–¥–µ—Ä–∂–∫–∞ —É–º–µ—Ä–µ–Ω–Ω–∞—è. –í—ã, —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ, –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –Ω–∞ —Ç–æ–º –∂–µ –∫–æ–Ω—Ç–∏–Ω–µ–Ω—Ç–µ, —á—Ç–æ –∏ {closest_target['location']}, –Ω–æ –Ω–∞ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ —Ä–∞–∑–Ω—ã—Ö –∫–æ–Ω—Ü–∞—Ö –ï–≤—Ä–æ–ø—ã/–ê–∑–∏–∏)."
    elif closest_target['avg_latency'] < 300 and closest_target['loss_percent'] < 15:
        conclusion = f"–ó–∞–¥–µ—Ä–∂–∫–∞ –≤—ã—Å–æ–∫–∞—è, –Ω–æ —Å—Ç–∞–±–∏–ª—å–Ω–∞—è. –í–µ—Ä–æ—è—Ç–Ω–æ, –í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –Ω–∞ –¥—Ä—É–≥–æ–º –∫–æ–Ω—Ç–∏–Ω–µ–Ω—Ç–µ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ {closest_target['location']}, –Ω–æ –º–∞—Ä—à—Ä—É—Ç —Ç—Ä–∞—Ñ–∏–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ø—Ä—è–º—ã–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ï–≤—Ä–æ–ø–∞ -> –°–µ–≤–µ—Ä–Ω–∞—è –ê–º–µ—Ä–∏–∫–∞)."
    else:
        # –≠—Ç–æ –º–∞–ª–æ–≤–µ—Ä–æ—è—Ç–Ω–æ, –µ—Å–ª–∏ –µ—Å—Ç—å —Ü–µ–ª–∏ —Å –Ω–∏–∑–∫–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π, –Ω–æ —Å–ª—É–∂–∏—Ç –æ–±—â–∏–º –≤—ã–≤–æ–¥–æ–º.
        conclusion = f"–ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è —Ç—Ä–∞—Ñ–∏–∫–∞ —Å–ª–æ–∂–Ω–∞. –°–∞–º–∞—è –Ω–∏–∑–∫–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ ({closest_target['avg_latency']:.2f} –º—Å) –±—ã–ª–∞ –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏, —á—Ç–æ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ —ç—Ç–æ—Ç —Ä–µ–≥–∏–æ–Ω –∫–∞–∫ –Ω–∞ –Ω–∞–∏–±–æ–ª–µ–µ –±–ª–∏–∑–∫–∏–π –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö."
        
    print(conclusion)
    print("================================================================================")

if __name__ == "__main__":
    run_geo_analyzer()
